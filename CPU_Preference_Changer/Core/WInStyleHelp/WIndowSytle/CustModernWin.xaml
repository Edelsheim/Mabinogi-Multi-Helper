<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:sys="clr-namespace:System;assembly=mscorlib" 
                    xmlns:windowsytle="clr-namespace:CPU_Preference_Changer.Core.WInStyleHelp.WIndowSytle"
                    x:Class="CPU_Preference_Changer.Core.WInStyleHelp.WIndowSytle.CustModernWin">

    <Style x:Key="CustModernWinStyle" TargetType="{x:Type Window}">
        <Style.Resources>
            <windowsytle:WindowStateToVisivilityConverter x:Key="winStateVisibleConv"/>
        </Style.Resources>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="1"
                        GlassFrameThickness="5"
                        ResizeBorderThickness="5"
                        NonClientFrameEdges="None" />
            </Setter.Value>
        </Setter>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Window}">
                    <Border BorderThickness="2" BorderBrush="Black">
                        <Grid x:Name="winOutGrid" Background="{TemplateBinding Background}" >
                            <Grid.RowDefinitions>
                                <RowDefinition Height="35"/>
                                <RowDefinition Height="1*"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="1*"/>
                            
                                <!-- 닫기버튼같은거 위치하는곳 (버튼 하나당 35소모) -->
                                <ColumnDefinition Width="105"/>
                            </Grid.ColumnDefinitions>

                            <!-- 타이틀 영역 끌기를 위해 선언.. 이걸 냅두고 Panel을 중첩시켜야, 
                            이 스타일을 사용하는 윈도우에서 타이틀 영역에 Slider처럼 끌기위한 컨트롤을 놔두더라도 
                            끌기작업을 할 수 있다...
                            ( TextBlock의 Z order가 더 낮아서 밑에 깔리기 때문 )-->
                            <TextBlock Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" Width="{TemplateBinding Width}" MouseMove="grid_mouseMove"/>
                            
                            <DockPanel x:Name="winTitleDockArea" VerticalAlignment="Center" Grid.Row="0" Grid.Column="0" Background="Transparent">
                                <TextBlock Text="{TemplateBinding Title}" Margin="10 0 0 0" DockPanel.Dock="Left"/>
                            </DockPanel>

                            <ContentPresenter x:Name="wContentPresenter" Grid.Row="1"  Grid.ColumnSpan="2"  Content="{TemplateBinding Content}"/>

                            <StackPanel Grid.Row="0" Grid.Column="1" VerticalAlignment="Center" Orientation="Horizontal">
                                <Button x:Name="winMinimize" Height="auto" BorderThickness="0" Click="winMinimizeBtn_Click">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="Red"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                    <Canvas Height="35" Width="35">
                                        <Line X1="13" Y1="23"  X2="23" Y2="23" Stroke="Black" StrokeThickness="0.75"/>
                                    </Canvas>
                                </Button>
                                <Button x:Name="winMinMaxBtn" Height="auto" BorderThickness="0" Click="winMinMaxBtn_Click">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="Red"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                    <Canvas Height="35" Width="35" >
                                        <!-- 최대화 최소화 모양를 조건에 따라 Visibility를 적절히 조절하여 보이게한다! -->
                                        <WrapPanel>
                                        
                                            <Grid Background="Transparent" 
                                                Visibility="{Binding (Window.WindowState)
                                                            ,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}
                                                            , Converter={StaticResource winStateVisibleConv}
                                                            , ConverterParameter=maxGrid}">
                                                <Line X1="13" Y1="13"  X2="23" Y2="13" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="23" Y1="13"  X2="23" Y2="23" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="23" Y1="23"  X2="13" Y2="23" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="13" Y1="23"  X2="13" Y2="13" Stroke="Black" StrokeThickness="0.75"/>
                                            </Grid>

                                            <Grid Background="Transparent" 
                                                Visibility="{Binding (Window.WindowState)
                                                            ,RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}
                                                            , Converter={StaticResource winStateVisibleConv}
                                                            , ConverterParameter=restoreGrid}">
                                                <Line X1="5" Y1="15"  X2="23" Y2="15" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="23" Y1="15"  X2="23" Y2="30" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="23" Y1="30"  X2="5" Y2="30" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="5" Y1="30"  X2="5" Y2="15" Stroke="Black" StrokeThickness="0.75"/>

                                                <Line X1="11" Y1="14"  X2="11" Y2="11" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="11" Y1="11"  X2="29" Y2="11" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="29" Y1="11"  X2="29" Y2="27" Stroke="Black" StrokeThickness="0.75"/>
                                                <Line X1="29" Y1="27"  X2="24" Y2="27" Stroke="Black" StrokeThickness="0.75"/>
                                            </Grid>
                                        </WrapPanel>
                                    </Canvas>

                                </Button>
                            
                                <Button x:Name="winCloseBtn" Height="auto" BorderThickness="0" Click="winCLoseBtn_Click">
                                    <Button.Style>
                                        <Style TargetType="Button">
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type Button}">
                                                        <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="0">
                                                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="Red"/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                    <Canvas Height="35" Width="35">
                                        <Line X1="13" Y1="13"  X2="23" Y2="23" Stroke="Black" StrokeThickness="0.75"/>
                                        <Line X1="13" Y1="23"  X2="23" Y2="13" Stroke="Black" StrokeThickness="0.75"/>
                                    </Canvas>
                                </Button>
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        
        <Style.Triggers>
            <Trigger Property="WindowState" Value="Maximized">
                <Setter Property="BorderThickness" Value="{Binding Source={x:Static SystemParameters.WindowResizeBorderThickness}}"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>